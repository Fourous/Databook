//给定N个整数的序列{ A1, A2, …, AN}，求函数f(i,j)=max{求和从i到j}最大值。
//就是求最大子串问题

//复杂度O(N^3)
void max(char a[],int n){
  int now=0,max=0;
  for (int i = 0; i < n; i++) {
    for (int j = i; j < n; j++) {
      for (int k = i; k < j; k++) {
        now+=now+a[k];
        if(now>max)   max=now;
      }

    }
  }
}

//O(N^2)
void max(char a[],int n){
  int now=0,max=0;
  for (int i = 0; i < n; i++) {
    for (int j = i; j < n; j++) {
      now+=a[j];
      if(now>max)   max=now;
    }
  }
}

//O(Nlog2N)分治法
void max(char a[],int n){
int  medium=n/2;
int letf=0,right=0,max1=max2=0;
for (int i = medium; i >0; i--) {
  letf+=a[i];
  if(letf>max1)   max1=letf;
}
for (int j = medium+1; j < n; j++) {
  right+=a[j];
  if(right>max2)       max2=right;
}
max=max1+max2;
}

//O(N)在线处理
void max(char a[],int n){
  int now=0,max=0;
for (int i = 0; i < n; i++) {
  now+=a[i];
  if(now>max)   max=now;
  else if(now<0)
  now=0;
}

}
